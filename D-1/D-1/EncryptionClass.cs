using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace D_1
{
    class EncryptionClass
    {
        public static string finalEncrypted;
        public static string Encrypt(string key, string plain)
        {
            string result = "";
            while(true)
            { 
                if(key.Length == 32)
                {
                    string[] alphabetArray =
                    {
                        createAlphabet(key[0]),createAlphabet(key[1]),createAlphabet(key[2]),createAlphabet(key[3]),createAlphabet(key[4]),createAlphabet(key[5]),createAlphabet(key[6]),createAlphabet(key[7]),createAlphabet(key[8]),createAlphabet(key[9]),createAlphabet(key[10]),createAlphabet(key[11]),createAlphabet(key[12]),createAlphabet(key[13]),createAlphabet(key[14]),createAlphabet(key[15]),createAlphabet(key[16]),createAlphabet(key[17]),createAlphabet(key[18]),createAlphabet(key[19]),createAlphabet(key[20]),createAlphabet(key[21]),createAlphabet(key[22]),createAlphabet(key[23]),createAlphabet(key[24]),createAlphabet(key[25]),createAlphabet(key[26]),createAlphabet(key[27]),createAlphabet(key[28]),createAlphabet(key[29]),createAlphabet(key[30]),createAlphabet(key[31]),createAlphabet(key[31]),createAlphabet(key[0]),createAlphabet(key[1]),createAlphabet(key[2]),createAlphabet(key[3]),createAlphabet(key[4]),createAlphabet(key[5]),createAlphabet(key[6]),createAlphabet(key[7]),createAlphabet(key[8]),createAlphabet(key[9]),createAlphabet(key[10]),createAlphabet(key[11]),createAlphabet(key[12]),createAlphabet(key[13]),createAlphabet(key[14]),createAlphabet(key[15]),createAlphabet(key[16]),createAlphabet(key[17]),createAlphabet(key[18]),createAlphabet(key[19]),createAlphabet(key[20]),createAlphabet(key[21]),createAlphabet(key[22]),createAlphabet(key[23]),createAlphabet(key[24]),createAlphabet(key[25]),createAlphabet(key[26]),createAlphabet(key[27]),createAlphabet(key[28]),createAlphabet(key[29]),createAlphabet(key[30]),createAlphabet(key[31]),createAlphabet(key[31]),createAlphabet(key[0]),createAlphabet(key[1]),createAlphabet(key[2]),createAlphabet(key[3]),createAlphabet(key[4]),createAlphabet(key[5]),createAlphabet(key[6]),createAlphabet(key[7]),createAlphabet(key[8]),createAlphabet(key[9]),createAlphabet(key[10]),createAlphabet(key[11]),createAlphabet(key[12]),createAlphabet(key[13]),createAlphabet(key[14]),createAlphabet(key[15]),createAlphabet(key[16]),createAlphabet(key[17]),createAlphabet(key[18]),createAlphabet(key[19]),createAlphabet(key[20]),createAlphabet(key[21]),createAlphabet(key[22]),createAlphabet(key[23]),createAlphabet(key[24]),createAlphabet(key[25]),createAlphabet(key[26]),createAlphabet(key[27]),createAlphabet(key[28]),createAlphabet(key[29]),createAlphabet(key[30]),createAlphabet(key[31]),createAlphabet(key[31]),createAlphabet(key[0]),createAlphabet(key[1]),createAlphabet(key[2]),createAlphabet(key[3]),createAlphabet(key[4]),createAlphabet(key[5]),createAlphabet(key[6]),createAlphabet(key[7]),createAlphabet(key[8]),createAlphabet(key[9]),createAlphabet(key[10]),createAlphabet(key[11]),createAlphabet(key[12]),createAlphabet(key[13]),createAlphabet(key[14]),createAlphabet(key[15]),createAlphabet(key[16]),createAlphabet(key[17]),createAlphabet(key[18]),createAlphabet(key[19]),createAlphabet(key[20]),createAlphabet(key[21]),createAlphabet(key[22]),createAlphabet(key[23]),createAlphabet(key[24]),createAlphabet(key[25]),createAlphabet(key[26]),createAlphabet(key[27]),createAlphabet(key[28]),createAlphabet(key[29]),createAlphabet(key[30]),createAlphabet(key[31]),createAlphabet(key[31]),createAlphabet(key[0]),createAlphabet(key[1]),createAlphabet(key[2]),createAlphabet(key[3]),createAlphabet(key[4]),createAlphabet(key[5]),createAlphabet(key[6]),createAlphabet(key[7]),createAlphabet(key[8]),createAlphabet(key[9]),createAlphabet(key[10]),createAlphabet(key[11]),createAlphabet(key[12]),createAlphabet(key[13]),createAlphabet(key[14]),createAlphabet(key[15]),createAlphabet(key[16]),createAlphabet(key[17]),createAlphabet(key[18]),createAlphabet(key[19]),createAlphabet(key[20]),createAlphabet(key[21]),createAlphabet(key[22]),createAlphabet(key[23]),createAlphabet(key[24]),createAlphabet(key[25]),createAlphabet(key[26]),createAlphabet(key[27]),createAlphabet(key[28]),createAlphabet(key[29]),createAlphabet(key[30]),createAlphabet(key[31]),createAlphabet(key[31]),createAlphabet(key[0]),createAlphabet(key[1]),createAlphabet(key[2]),createAlphabet(key[3]),createAlphabet(key[4]),createAlphabet(key[5]),createAlphabet(key[6]),createAlphabet(key[7]),createAlphabet(key[8]),createAlphabet(key[9]),createAlphabet(key[10]),createAlphabet(key[11]),createAlphabet(key[12]),createAlphabet(key[13]),createAlphabet(key[14]),createAlphabet(key[15]),createAlphabet(key[16]),createAlphabet(key[17]),createAlphabet(key[18]),createAlphabet(key[19]),createAlphabet(key[20]),createAlphabet(key[21]),createAlphabet(key[22]),createAlphabet(key[23]),createAlphabet(key[24]),createAlphabet(key[25]),createAlphabet(key[26]),createAlphabet(key[27]),createAlphabet(key[28]),createAlphabet(key[29]),createAlphabet(key[30]),createAlphabet(key[31]),createAlphabet(key[31]),createAlphabet(key[0]),createAlphabet(key[1]),createAlphabet(key[2]),createAlphabet(key[3]),createAlphabet(key[4]),createAlphabet(key[5]),createAlphabet(key[6]),createAlphabet(key[7]),createAlphabet(key[8]),createAlphabet(key[9]),createAlphabet(key[10]),createAlphabet(key[11]),createAlphabet(key[12]),createAlphabet(key[13]),createAlphabet(key[14]),createAlphabet(key[15]),createAlphabet(key[16]),createAlphabet(key[17]),createAlphabet(key[18]),createAlphabet(key[19]),createAlphabet(key[20]),createAlphabet(key[21]),createAlphabet(key[22]),createAlphabet(key[23]),createAlphabet(key[24]),createAlphabet(key[25]),createAlphabet(key[26]),createAlphabet(key[27]),createAlphabet(key[28]),createAlphabet(key[29]),createAlphabet(key[30]),createAlphabet(key[31]),createAlphabet(key[31]),createAlphabet(key[0]),createAlphabet(key[1]),createAlphabet(key[2]),createAlphabet(key[3]),createAlphabet(key[4]),createAlphabet(key[5]),createAlphabet(key[6]),createAlphabet(key[7]),createAlphabet(key[8]),createAlphabet(key[9]),createAlphabet(key[10]),createAlphabet(key[11]),createAlphabet(key[12]),createAlphabet(key[13]),createAlphabet(key[14]),createAlphabet(key[15]),createAlphabet(key[16]),createAlphabet(key[17]),createAlphabet(key[18]),createAlphabet(key[19]),createAlphabet(key[20]),createAlphabet(key[21]),createAlphabet(key[22]),createAlphabet(key[23]),createAlphabet(key[24]),createAlphabet(key[25]),createAlphabet(key[26]),createAlphabet(key[27]),createAlphabet(key[28]),createAlphabet(key[29]),createAlphabet(key[30]),createAlphabet(key[31]),createAlphabet(key[31]),createAlphabet(key[0]),createAlphabet(key[1]),createAlphabet(key[2]),createAlphabet(key[3]),createAlphabet(key[4]),createAlphabet(key[5]),createAlphabet(key[6]),createAlphabet(key[7]),createAlphabet(key[8]),createAlphabet(key[9]),createAlphabet(key[10]),createAlphabet(key[11]),createAlphabet(key[12]),createAlphabet(key[13]),createAlphabet(key[14]),createAlphabet(key[15]),createAlphabet(key[16]),createAlphabet(key[17]),createAlphabet(key[18]),createAlphabet(key[19]),createAlphabet(key[20]),createAlphabet(key[21]),createAlphabet(key[22]),createAlphabet(key[23]),createAlphabet(key[24]),createAlphabet(key[25]),createAlphabet(key[26]),createAlphabet(key[27]),createAlphabet(key[28]),createAlphabet(key[29]),createAlphabet(key[30]),createAlphabet(key[31]),createAlphabet(key[31]),createAlphabet(key[0]),createAlphabet(key[1]),createAlphabet(key[2]),createAlphabet(key[3]),createAlphabet(key[4]),createAlphabet(key[5]),createAlphabet(key[6]),createAlphabet(key[7]),createAlphabet(key[8]),createAlphabet(key[9]),createAlphabet(key[10]),createAlphabet(key[11]),createAlphabet(key[12]),createAlphabet(key[13]),createAlphabet(key[14]),createAlphabet(key[15]),createAlphabet(key[16]),createAlphabet(key[17]),createAlphabet(key[18]),createAlphabet(key[19]),createAlphabet(key[20]),createAlphabet(key[21]),createAlphabet(key[22]),createAlphabet(key[23]),createAlphabet(key[24]),createAlphabet(key[25]),createAlphabet(key[26]),createAlphabet(key[27]),createAlphabet(key[28]),createAlphabet(key[29]),createAlphabet(key[30]),createAlphabet(key[31]),createAlphabet(key[31]),createAlphabet(key[0]),createAlphabet(key[1]),createAlphabet(key[2]),createAlphabet(key[3]),createAlphabet(key[4]),createAlphabet(key[5]),createAlphabet(key[6]),createAlphabet(key[7]),createAlphabet(key[8]),createAlphabet(key[9]),createAlphabet(key[10]),createAlphabet(key[11]),createAlphabet(key[12]),createAlphabet(key[13]),createAlphabet(key[14]),createAlphabet(key[15]),createAlphabet(key[16]),createAlphabet(key[17]),createAlphabet(key[18]),createAlphabet(key[19]),createAlphabet(key[20]),createAlphabet(key[21]),createAlphabet(key[22]),createAlphabet(key[23]),createAlphabet(key[24]),createAlphabet(key[25]),createAlphabet(key[26]),createAlphabet(key[27]),createAlphabet(key[28]),createAlphabet(key[29]),createAlphabet(key[30]),createAlphabet(key[31]),createAlphabet(key[31]),createAlphabet(key[0]),createAlphabet(key[1]),createAlphabet(key[2]),createAlphabet(key[3]),createAlphabet(key[4]),createAlphabet(key[5]),createAlphabet(key[6]),createAlphabet(key[7]),createAlphabet(key[8]),createAlphabet(key[9]),createAlphabet(key[10]),createAlphabet(key[11]),createAlphabet(key[12]),createAlphabet(key[13]),createAlphabet(key[14]),createAlphabet(key[15]),createAlphabet(key[16]),createAlphabet(key[17]),createAlphabet(key[18]),createAlphabet(key[19]),createAlphabet(key[20]),createAlphabet(key[21]),createAlphabet(key[22]),createAlphabet(key[23]),createAlphabet(key[24]),createAlphabet(key[25]),createAlphabet(key[26]),createAlphabet(key[27]),createAlphabet(key[28]),createAlphabet(key[29]),createAlphabet(key[30]),createAlphabet(key[31]),createAlphabet(key[31]),createAlphabet(key[0]),createAlphabet(key[1]),createAlphabet(key[2]),createAlphabet(key[3]),createAlphabet(key[4]),createAlphabet(key[5]),createAlphabet(key[6]),createAlphabet(key[7]),createAlphabet(key[8]),createAlphabet(key[9]),createAlphabet(key[10]),createAlphabet(key[11]),createAlphabet(key[12]),createAlphabet(key[13]),createAlphabet(key[14]),createAlphabet(key[15]),createAlphabet(key[16]),createAlphabet(key[17]),createAlphabet(key[18]),createAlphabet(key[19]),createAlphabet(key[20]),createAlphabet(key[21]),createAlphabet(key[22]),createAlphabet(key[23]),createAlphabet(key[24]),createAlphabet(key[25]),createAlphabet(key[26]),createAlphabet(key[27]),createAlphabet(key[28]),createAlphabet(key[29]),createAlphabet(key[30]),createAlphabet(key[31]),createAlphabet(key[31]),createAlphabet(key[0]),createAlphabet(key[1]),createAlphabet(key[2]),createAlphabet(key[3]),createAlphabet(key[4]),createAlphabet(key[5]),createAlphabet(key[6]),createAlphabet(key[7]),createAlphabet(key[8]),createAlphabet(key[9]),createAlphabet(key[10]),createAlphabet(key[11]),createAlphabet(key[12]),createAlphabet(key[13]),createAlphabet(key[14]),createAlphabet(key[15]),createAlphabet(key[16]),createAlphabet(key[17]),createAlphabet(key[18]),createAlphabet(key[19]),createAlphabet(key[20]),createAlphabet(key[21]),createAlphabet(key[22]),createAlphabet(key[23]),createAlphabet(key[24]),createAlphabet(key[25]),createAlphabet(key[26]),createAlphabet(key[27]),createAlphabet(key[28]),createAlphabet(key[29]),createAlphabet(key[30]),createAlphabet(key[31]),createAlphabet(key[31]),createAlphabet(key[0]),createAlphabet(key[1]),createAlphabet(key[2]),createAlphabet(key[3]),createAlphabet(key[4]),createAlphabet(key[5]),createAlphabet(key[6]),createAlphabet(key[7]),createAlphabet(key[8]),createAlphabet(key[9]),createAlphabet(key[10]),createAlphabet(key[11]),createAlphabet(key[12]),createAlphabet(key[13]),createAlphabet(key[14]),createAlphabet(key[15]),createAlphabet(key[16]),createAlphabet(key[17]),createAlphabet(key[18]),createAlphabet(key[19]),createAlphabet(key[20]),createAlphabet(key[21]),createAlphabet(key[22]),createAlphabet(key[23]),createAlphabet(key[24]),createAlphabet(key[25]),createAlphabet(key[26]),createAlphabet(key[27]),createAlphabet(key[28]),createAlphabet(key[29]),createAlphabet(key[30]),createAlphabet(key[31]),createAlphabet(key[31]),createAlphabet(key[0]),createAlphabet(key[1]),createAlphabet(key[2]),createAlphabet(key[3]),createAlphabet(key[4]),createAlphabet(key[5]),createAlphabet(key[6]),createAlphabet(key[7]),createAlphabet(key[8]),createAlphabet(key[9]),createAlphabet(key[10]),createAlphabet(key[11]),createAlphabet(key[12]),createAlphabet(key[13]),createAlphabet(key[14]),createAlphabet(key[15]),createAlphabet(key[16]),createAlphabet(key[17]),createAlphabet(key[18]),createAlphabet(key[19]),createAlphabet(key[20]),createAlphabet(key[21]),createAlphabet(key[22]),createAlphabet(key[23]),createAlphabet(key[24]),createAlphabet(key[25]),createAlphabet(key[26]),createAlphabet(key[27]),createAlphabet(key[28]),createAlphabet(key[29]),createAlphabet(key[30]),createAlphabet(key[31]),createAlphabet(key[31])
                    };
                    Console.WriteLine("Alphabets: " + String.Concat(alphabetArray));
                    Console.WriteLine("\nPlain text: " + plain);
                    Console.WriteLine("\nLength of plain text: " + plain.Length);
                    Console.WriteLine("\nKey: " + key + "\n");
                    for (int i = 0; i < plain.Length; i++)
                    {
                        char c = plain[i];
                        string alphabetBase = @"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789/\@àçéè*-+=_#$£%ùµ§!:.;?,";
                        int at = alphabetBase.IndexOf(c, 0, 86);
                        string alphabetused = alphabetArray[i];
                        if (c == ' ')
                        {
                            finalEncrypted = finalEncrypted + " ";
                            Console.WriteLine(c + " => Space" + "\n");
                        } else
                        {
                            finalEncrypted = finalEncrypted + alphabetused[at];
                            Console.WriteLine(c + " => " + alphabetArray[i] + " => " + alphabetused[at] + " - " + finalEncrypted + "\n");
                        }
                    }
                    result = finalEncrypted;
                    break;
                } else
                {
                    result = "Invalid Key";
                }
            }
            return result;
        }
        public static string createAlphabet(char key)
        {
            string alphabetBase = @"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789/\@àçéè*-+=_#$£%ùµ§!:.;?,";
            int at = 0;
            at = alphabetBase.IndexOf(key, 0, 86);
            Console.WriteLine(at);
            string alphabetResult = ShiftString(alphabetBase, at);
            return alphabetResult;
        }
        public static string ShiftString(string t, int length)
        {
            return t.Substring(length, t.Length - length) + t.Substring(0, length);
        }
    }
}
